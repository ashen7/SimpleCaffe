// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe.proto

#ifndef PROTOBUF_caffe_2eproto__INCLUDED
#define PROTOBUF_caffe_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_caffe_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsTensorShapeImpl();
void InitDefaultsTensorShape();
void InitDefaultsTensorProtoImpl();
void InitDefaultsTensorProto();
void InitDefaultsTensorProtoListImpl();
void InitDefaultsTensorProtoList();
void InitDefaultsFillerParameterImpl();
void InitDefaultsFillerParameter();
inline void InitDefaults() {
  InitDefaultsTensorShape();
  InitDefaultsTensorProto();
  InitDefaultsTensorProtoList();
  InitDefaultsFillerParameter();
}
}  // namespace protobuf_caffe_2eproto
namespace caffe {
class FillerParameter;
class FillerParameterDefaultTypeInternal;
extern FillerParameterDefaultTypeInternal _FillerParameter_default_instance_;
class TensorProto;
class TensorProtoDefaultTypeInternal;
extern TensorProtoDefaultTypeInternal _TensorProto_default_instance_;
class TensorProtoList;
class TensorProtoListDefaultTypeInternal;
extern TensorProtoListDefaultTypeInternal _TensorProtoList_default_instance_;
class TensorShape;
class TensorShapeDefaultTypeInternal;
extern TensorShapeDefaultTypeInternal _TensorShape_default_instance_;
}  // namespace caffe
namespace caffe {

enum FillerParameter_VarianceNorm {
  FillerParameter_VarianceNorm_FAN_IN = 0,
  FillerParameter_VarianceNorm_FAN_OUT = 1,
  FillerParameter_VarianceNorm_AVERAGE = 2,
  FillerParameter_VarianceNorm_FillerParameter_VarianceNorm_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FillerParameter_VarianceNorm_FillerParameter_VarianceNorm_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FillerParameter_VarianceNorm_IsValid(int value);
const FillerParameter_VarianceNorm FillerParameter_VarianceNorm_VarianceNorm_MIN = FillerParameter_VarianceNorm_FAN_IN;
const FillerParameter_VarianceNorm FillerParameter_VarianceNorm_VarianceNorm_MAX = FillerParameter_VarianceNorm_AVERAGE;
const int FillerParameter_VarianceNorm_VarianceNorm_ARRAYSIZE = FillerParameter_VarianceNorm_VarianceNorm_MAX + 1;

const ::google::protobuf::EnumDescriptor* FillerParameter_VarianceNorm_descriptor();
inline const ::std::string& FillerParameter_VarianceNorm_Name(FillerParameter_VarianceNorm value) {
  return ::google::protobuf::internal::NameOfEnum(
    FillerParameter_VarianceNorm_descriptor(), value);
}
inline bool FillerParameter_VarianceNorm_Parse(
    const ::std::string& name, FillerParameter_VarianceNorm* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FillerParameter_VarianceNorm>(
    FillerParameter_VarianceNorm_descriptor(), name, value);
}
// ===================================================================

class TensorShape : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.TensorShape) */ {
 public:
  TensorShape();
  virtual ~TensorShape();

  TensorShape(const TensorShape& from);

  inline TensorShape& operator=(const TensorShape& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TensorShape(TensorShape&& from) noexcept
    : TensorShape() {
    *this = ::std::move(from);
  }

  inline TensorShape& operator=(TensorShape&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TensorShape& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TensorShape* internal_default_instance() {
    return reinterpret_cast<const TensorShape*>(
               &_TensorShape_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TensorShape* other);
  friend void swap(TensorShape& a, TensorShape& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TensorShape* New() const PROTOBUF_FINAL { return New(NULL); }

  TensorShape* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TensorShape& from);
  void MergeFrom(const TensorShape& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TensorShape* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 dim = 1;
  int dim_size() const;
  void clear_dim();
  static const int kDimFieldNumber = 1;
  ::google::protobuf::int64 dim(int index) const;
  void set_dim(int index, ::google::protobuf::int64 value);
  void add_dim(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      dim() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_dim();

  // @@protoc_insertion_point(class_scope:caffe.TensorShape)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > dim_;
  mutable int _dim_cached_byte_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
  friend void ::protobuf_caffe_2eproto::InitDefaultsTensorShapeImpl();
};
// -------------------------------------------------------------------

class TensorProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.TensorProto) */ {
 public:
  TensorProto();
  virtual ~TensorProto();

  TensorProto(const TensorProto& from);

  inline TensorProto& operator=(const TensorProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TensorProto(TensorProto&& from) noexcept
    : TensorProto() {
    *this = ::std::move(from);
  }

  inline TensorProto& operator=(TensorProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TensorProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TensorProto* internal_default_instance() {
    return reinterpret_cast<const TensorProto*>(
               &_TensorProto_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TensorProto* other);
  friend void swap(TensorProto& a, TensorProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TensorProto* New() const PROTOBUF_FINAL { return New(NULL); }

  TensorProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TensorProto& from);
  void MergeFrom(const TensorProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TensorProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float data = 5;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 5;
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::google::protobuf::RepeatedField< float >&
      data() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // repeated float diff = 6;
  int diff_size() const;
  void clear_diff();
  static const int kDiffFieldNumber = 6;
  float diff(int index) const;
  void set_diff(int index, float value);
  void add_diff(float value);
  const ::google::protobuf::RepeatedField< float >&
      diff() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_diff();

  // repeated double double_data = 8;
  int double_data_size() const;
  void clear_double_data();
  static const int kDoubleDataFieldNumber = 8;
  double double_data(int index) const;
  void set_double_data(int index, double value);
  void add_double_data(double value);
  const ::google::protobuf::RepeatedField< double >&
      double_data() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_double_data();

  // repeated double double_diff = 9;
  int double_diff_size() const;
  void clear_double_diff();
  static const int kDoubleDiffFieldNumber = 9;
  double double_diff(int index) const;
  void set_double_diff(int index, double value);
  void add_double_diff(double value);
  const ::google::protobuf::RepeatedField< double >&
      double_diff() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_double_diff();

  // .caffe.TensorShape shape = 7;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 7;
  const ::caffe::TensorShape& shape() const;
  ::caffe::TensorShape* release_shape();
  ::caffe::TensorShape* mutable_shape();
  void set_allocated_shape(::caffe::TensorShape* shape);

  // int32 num = 1;
  void clear_num();
  static const int kNumFieldNumber = 1;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // int32 channels = 2;
  void clear_channels();
  static const int kChannelsFieldNumber = 2;
  ::google::protobuf::int32 channels() const;
  void set_channels(::google::protobuf::int32 value);

  // int32 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // int32 width = 4;
  void clear_width();
  static const int kWidthFieldNumber = 4;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.TensorProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > diff_;
  mutable int _diff_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > double_data_;
  mutable int _double_data_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > double_diff_;
  mutable int _double_diff_cached_byte_size_;
  ::caffe::TensorShape* shape_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 channels_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 width_;
  mutable int _cached_size_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
  friend void ::protobuf_caffe_2eproto::InitDefaultsTensorProtoImpl();
};
// -------------------------------------------------------------------

class TensorProtoList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.TensorProtoList) */ {
 public:
  TensorProtoList();
  virtual ~TensorProtoList();

  TensorProtoList(const TensorProtoList& from);

  inline TensorProtoList& operator=(const TensorProtoList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TensorProtoList(TensorProtoList&& from) noexcept
    : TensorProtoList() {
    *this = ::std::move(from);
  }

  inline TensorProtoList& operator=(TensorProtoList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TensorProtoList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TensorProtoList* internal_default_instance() {
    return reinterpret_cast<const TensorProtoList*>(
               &_TensorProtoList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(TensorProtoList* other);
  friend void swap(TensorProtoList& a, TensorProtoList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TensorProtoList* New() const PROTOBUF_FINAL { return New(NULL); }

  TensorProtoList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TensorProtoList& from);
  void MergeFrom(const TensorProtoList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TensorProtoList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.TensorProto tensor = 1;
  int tensor_size() const;
  void clear_tensor();
  static const int kTensorFieldNumber = 1;
  const ::caffe::TensorProto& tensor(int index) const;
  ::caffe::TensorProto* mutable_tensor(int index);
  ::caffe::TensorProto* add_tensor();
  ::google::protobuf::RepeatedPtrField< ::caffe::TensorProto >*
      mutable_tensor();
  const ::google::protobuf::RepeatedPtrField< ::caffe::TensorProto >&
      tensor() const;

  // @@protoc_insertion_point(class_scope:caffe.TensorProtoList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::caffe::TensorProto > tensor_;
  mutable int _cached_size_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
  friend void ::protobuf_caffe_2eproto::InitDefaultsTensorProtoListImpl();
};
// -------------------------------------------------------------------

class FillerParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.FillerParameter) */ {
 public:
  FillerParameter();
  virtual ~FillerParameter();

  FillerParameter(const FillerParameter& from);

  inline FillerParameter& operator=(const FillerParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FillerParameter(FillerParameter&& from) noexcept
    : FillerParameter() {
    *this = ::std::move(from);
  }

  inline FillerParameter& operator=(FillerParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FillerParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FillerParameter* internal_default_instance() {
    return reinterpret_cast<const FillerParameter*>(
               &_FillerParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(FillerParameter* other);
  friend void swap(FillerParameter& a, FillerParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FillerParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  FillerParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FillerParameter& from);
  void MergeFrom(const FillerParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FillerParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef FillerParameter_VarianceNorm VarianceNorm;
  static const VarianceNorm FAN_IN =
    FillerParameter_VarianceNorm_FAN_IN;
  static const VarianceNorm FAN_OUT =
    FillerParameter_VarianceNorm_FAN_OUT;
  static const VarianceNorm AVERAGE =
    FillerParameter_VarianceNorm_AVERAGE;
  static inline bool VarianceNorm_IsValid(int value) {
    return FillerParameter_VarianceNorm_IsValid(value);
  }
  static const VarianceNorm VarianceNorm_MIN =
    FillerParameter_VarianceNorm_VarianceNorm_MIN;
  static const VarianceNorm VarianceNorm_MAX =
    FillerParameter_VarianceNorm_VarianceNorm_MAX;
  static const int VarianceNorm_ARRAYSIZE =
    FillerParameter_VarianceNorm_VarianceNorm_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VarianceNorm_descriptor() {
    return FillerParameter_VarianceNorm_descriptor();
  }
  static inline const ::std::string& VarianceNorm_Name(VarianceNorm value) {
    return FillerParameter_VarianceNorm_Name(value);
  }
  static inline bool VarianceNorm_Parse(const ::std::string& name,
      VarianceNorm* value) {
    return FillerParameter_VarianceNorm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // float value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  float value() const;
  void set_value(float value);

  // float min = 3;
  void clear_min();
  static const int kMinFieldNumber = 3;
  float min() const;
  void set_min(float value);

  // float max = 4;
  void clear_max();
  static const int kMaxFieldNumber = 4;
  float max() const;
  void set_max(float value);

  // float mean = 5;
  void clear_mean();
  static const int kMeanFieldNumber = 5;
  float mean() const;
  void set_mean(float value);

  // float stddev = 6;
  void clear_stddev();
  static const int kStddevFieldNumber = 6;
  float stddev() const;
  void set_stddev(float value);

  // int32 sparse = 7;
  void clear_sparse();
  static const int kSparseFieldNumber = 7;
  ::google::protobuf::int32 sparse() const;
  void set_sparse(::google::protobuf::int32 value);

  // .caffe.FillerParameter.VarianceNorm variance_norm = 8;
  void clear_variance_norm();
  static const int kVarianceNormFieldNumber = 8;
  ::caffe::FillerParameter_VarianceNorm variance_norm() const;
  void set_variance_norm(::caffe::FillerParameter_VarianceNorm value);

  // @@protoc_insertion_point(class_scope:caffe.FillerParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  float value_;
  float min_;
  float max_;
  float mean_;
  float stddev_;
  ::google::protobuf::int32 sparse_;
  int variance_norm_;
  mutable int _cached_size_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
  friend void ::protobuf_caffe_2eproto::InitDefaultsFillerParameterImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TensorShape

// repeated int64 dim = 1;
inline int TensorShape::dim_size() const {
  return dim_.size();
}
inline void TensorShape::clear_dim() {
  dim_.Clear();
}
inline ::google::protobuf::int64 TensorShape::dim(int index) const {
  // @@protoc_insertion_point(field_get:caffe.TensorShape.dim)
  return dim_.Get(index);
}
inline void TensorShape::set_dim(int index, ::google::protobuf::int64 value) {
  dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.TensorShape.dim)
}
inline void TensorShape::add_dim(::google::protobuf::int64 value) {
  dim_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.TensorShape.dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TensorShape::dim() const {
  // @@protoc_insertion_point(field_list:caffe.TensorShape.dim)
  return dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TensorShape::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:caffe.TensorShape.dim)
  return &dim_;
}

// -------------------------------------------------------------------

// TensorProto

// int32 num = 1;
inline void TensorProto::clear_num() {
  num_ = 0;
}
inline ::google::protobuf::int32 TensorProto::num() const {
  // @@protoc_insertion_point(field_get:caffe.TensorProto.num)
  return num_;
}
inline void TensorProto::set_num(::google::protobuf::int32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:caffe.TensorProto.num)
}

// int32 channels = 2;
inline void TensorProto::clear_channels() {
  channels_ = 0;
}
inline ::google::protobuf::int32 TensorProto::channels() const {
  // @@protoc_insertion_point(field_get:caffe.TensorProto.channels)
  return channels_;
}
inline void TensorProto::set_channels(::google::protobuf::int32 value) {
  
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.TensorProto.channels)
}

// int32 height = 3;
inline void TensorProto::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 TensorProto::height() const {
  // @@protoc_insertion_point(field_get:caffe.TensorProto.height)
  return height_;
}
inline void TensorProto::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.TensorProto.height)
}

// int32 width = 4;
inline void TensorProto::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 TensorProto::width() const {
  // @@protoc_insertion_point(field_get:caffe.TensorProto.width)
  return width_;
}
inline void TensorProto::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.TensorProto.width)
}

// repeated float data = 5;
inline int TensorProto::data_size() const {
  return data_.size();
}
inline void TensorProto::clear_data() {
  data_.Clear();
}
inline float TensorProto::data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.TensorProto.data)
  return data_.Get(index);
}
inline void TensorProto::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.TensorProto.data)
}
inline void TensorProto::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.TensorProto.data)
}
inline const ::google::protobuf::RepeatedField< float >&
TensorProto::data() const {
  // @@protoc_insertion_point(field_list:caffe.TensorProto.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
TensorProto::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.TensorProto.data)
  return &data_;
}

// repeated float diff = 6;
inline int TensorProto::diff_size() const {
  return diff_.size();
}
inline void TensorProto::clear_diff() {
  diff_.Clear();
}
inline float TensorProto::diff(int index) const {
  // @@protoc_insertion_point(field_get:caffe.TensorProto.diff)
  return diff_.Get(index);
}
inline void TensorProto::set_diff(int index, float value) {
  diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.TensorProto.diff)
}
inline void TensorProto::add_diff(float value) {
  diff_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.TensorProto.diff)
}
inline const ::google::protobuf::RepeatedField< float >&
TensorProto::diff() const {
  // @@protoc_insertion_point(field_list:caffe.TensorProto.diff)
  return diff_;
}
inline ::google::protobuf::RepeatedField< float >*
TensorProto::mutable_diff() {
  // @@protoc_insertion_point(field_mutable_list:caffe.TensorProto.diff)
  return &diff_;
}

// repeated double double_data = 8;
inline int TensorProto::double_data_size() const {
  return double_data_.size();
}
inline void TensorProto::clear_double_data() {
  double_data_.Clear();
}
inline double TensorProto::double_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.TensorProto.double_data)
  return double_data_.Get(index);
}
inline void TensorProto::set_double_data(int index, double value) {
  double_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.TensorProto.double_data)
}
inline void TensorProto::add_double_data(double value) {
  double_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.TensorProto.double_data)
}
inline const ::google::protobuf::RepeatedField< double >&
TensorProto::double_data() const {
  // @@protoc_insertion_point(field_list:caffe.TensorProto.double_data)
  return double_data_;
}
inline ::google::protobuf::RepeatedField< double >*
TensorProto::mutable_double_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.TensorProto.double_data)
  return &double_data_;
}

// repeated double double_diff = 9;
inline int TensorProto::double_diff_size() const {
  return double_diff_.size();
}
inline void TensorProto::clear_double_diff() {
  double_diff_.Clear();
}
inline double TensorProto::double_diff(int index) const {
  // @@protoc_insertion_point(field_get:caffe.TensorProto.double_diff)
  return double_diff_.Get(index);
}
inline void TensorProto::set_double_diff(int index, double value) {
  double_diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.TensorProto.double_diff)
}
inline void TensorProto::add_double_diff(double value) {
  double_diff_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.TensorProto.double_diff)
}
inline const ::google::protobuf::RepeatedField< double >&
TensorProto::double_diff() const {
  // @@protoc_insertion_point(field_list:caffe.TensorProto.double_diff)
  return double_diff_;
}
inline ::google::protobuf::RepeatedField< double >*
TensorProto::mutable_double_diff() {
  // @@protoc_insertion_point(field_mutable_list:caffe.TensorProto.double_diff)
  return &double_diff_;
}

// .caffe.TensorShape shape = 7;
inline bool TensorProto::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
inline void TensorProto::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) {
    delete shape_;
  }
  shape_ = NULL;
}
inline const ::caffe::TensorShape& TensorProto::shape() const {
  const ::caffe::TensorShape* p = shape_;
  // @@protoc_insertion_point(field_get:caffe.TensorProto.shape)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::TensorShape*>(
      &::caffe::_TensorShape_default_instance_);
}
inline ::caffe::TensorShape* TensorProto::release_shape() {
  // @@protoc_insertion_point(field_release:caffe.TensorProto.shape)
  
  ::caffe::TensorShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline ::caffe::TensorShape* TensorProto::mutable_shape() {
  
  if (shape_ == NULL) {
    shape_ = new ::caffe::TensorShape;
  }
  // @@protoc_insertion_point(field_mutable:caffe.TensorProto.shape)
  return shape_;
}
inline void TensorProto::set_allocated_shape(::caffe::TensorShape* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shape_;
  }
  if (shape) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      shape = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    
  } else {
    
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:caffe.TensorProto.shape)
}

// -------------------------------------------------------------------

// TensorProtoList

// repeated .caffe.TensorProto tensor = 1;
inline int TensorProtoList::tensor_size() const {
  return tensor_.size();
}
inline void TensorProtoList::clear_tensor() {
  tensor_.Clear();
}
inline const ::caffe::TensorProto& TensorProtoList::tensor(int index) const {
  // @@protoc_insertion_point(field_get:caffe.TensorProtoList.tensor)
  return tensor_.Get(index);
}
inline ::caffe::TensorProto* TensorProtoList::mutable_tensor(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.TensorProtoList.tensor)
  return tensor_.Mutable(index);
}
inline ::caffe::TensorProto* TensorProtoList::add_tensor() {
  // @@protoc_insertion_point(field_add:caffe.TensorProtoList.tensor)
  return tensor_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::TensorProto >*
TensorProtoList::mutable_tensor() {
  // @@protoc_insertion_point(field_mutable_list:caffe.TensorProtoList.tensor)
  return &tensor_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::TensorProto >&
TensorProtoList::tensor() const {
  // @@protoc_insertion_point(field_list:caffe.TensorProtoList.tensor)
  return tensor_;
}

// -------------------------------------------------------------------

// FillerParameter

// string type = 1;
inline void FillerParameter::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FillerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.type)
  return type_.GetNoArena();
}
inline void FillerParameter::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.type)
}
#if LANG_CXX11
inline void FillerParameter::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.FillerParameter.type)
}
#endif
inline void FillerParameter::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.FillerParameter.type)
}
inline void FillerParameter::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.FillerParameter.type)
}
inline ::std::string* FillerParameter::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:caffe.FillerParameter.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FillerParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.FillerParameter.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FillerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe.FillerParameter.type)
}

// float value = 2;
inline void FillerParameter::clear_value() {
  value_ = 0;
}
inline float FillerParameter::value() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.value)
  return value_;
}
inline void FillerParameter::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.value)
}

// float min = 3;
inline void FillerParameter::clear_min() {
  min_ = 0;
}
inline float FillerParameter::min() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.min)
  return min_;
}
inline void FillerParameter::set_min(float value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.min)
}

// float max = 4;
inline void FillerParameter::clear_max() {
  max_ = 0;
}
inline float FillerParameter::max() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.max)
  return max_;
}
inline void FillerParameter::set_max(float value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.max)
}

// float mean = 5;
inline void FillerParameter::clear_mean() {
  mean_ = 0;
}
inline float FillerParameter::mean() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.mean)
  return mean_;
}
inline void FillerParameter::set_mean(float value) {
  
  mean_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.mean)
}

// float stddev = 6;
inline void FillerParameter::clear_stddev() {
  stddev_ = 0;
}
inline float FillerParameter::stddev() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.stddev)
  return stddev_;
}
inline void FillerParameter::set_stddev(float value) {
  
  stddev_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.stddev)
}

// int32 sparse = 7;
inline void FillerParameter::clear_sparse() {
  sparse_ = 0;
}
inline ::google::protobuf::int32 FillerParameter::sparse() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.sparse)
  return sparse_;
}
inline void FillerParameter::set_sparse(::google::protobuf::int32 value) {
  
  sparse_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.sparse)
}

// .caffe.FillerParameter.VarianceNorm variance_norm = 8;
inline void FillerParameter::clear_variance_norm() {
  variance_norm_ = 0;
}
inline ::caffe::FillerParameter_VarianceNorm FillerParameter::variance_norm() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.variance_norm)
  return static_cast< ::caffe::FillerParameter_VarianceNorm >(variance_norm_);
}
inline void FillerParameter::set_variance_norm(::caffe::FillerParameter_VarianceNorm value) {
  
  variance_norm_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.variance_norm)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::caffe::FillerParameter_VarianceNorm> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::FillerParameter_VarianceNorm>() {
  return ::caffe::FillerParameter_VarianceNorm_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_caffe_2eproto__INCLUDED
