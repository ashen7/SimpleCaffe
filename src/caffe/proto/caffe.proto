syntax = "proto3";    //语法

package caffe;        //命名空间

//message就是类 里面的每个字段都是一个类成员 1-15的标识符占1个字节 16-2047占2个字节
message TensorShape {
    repeated int64 dim = 1;  //proto3的repeated 默认使用packed
}

//Tensor的proto对象
message TensorProto {
    //tensor 4d dims
    int32 num = 1;
    int32 channels = 2;
    int32 height = 3;
    int32 width = 4;

    //输入/输出 和梯度
    repeated float data = 5;
    repeated float diff = 6;
    repeated double double_data = 8;
    repeated double double_diff = 9;
    TensorShape shape = 7;
}

//多个tensor proto对象
message TensorProtoList {
    repeated TensorProto tensors = 1;
}

//fill的参数
message FillerParameter {
    string type = 1;  //随机数初始化类型
    float value = 2;  //常数初始化的值
    float min = 3;    //均匀分布的下界
    float max = 4;    //均匀分布的上界
    float mean = 5;   //正态分布的均值
    float stddev = 6; //正态分布的标准差
    int32 sparse = 7; //稀疏化 正态分布
    //Xavier初始化 3/n的开方范围的均匀分布 这个枚举是取n的选项
    enum VarianceNorm {
        FAN_IN = 0;
        FAN_OUT= 1;
        AVERAGE = 2;
    }
    VarianceNorm variance_norm = 8;
}

//全局枚举
enum Phase {
    TRAIN = 0;
    TEST = 1;
}

//layer层参数
message LayerParameter {
    string name = 1;        //层的名字
    string type = 2;        //层的类型
    string bottom = 3;      //输入tensor的名字
    string top = 4;         //输出tensor的名字

    //每个输出tensor的权重
    repeated float loss_weight = 5;
    //层的权重
    repeated TensorProto tensors = 6;
    //是否反向传播到下层
    repeated bool propagate_down = 7;

    //train/test 阶段
    Phase phase = 10;

    ReLUParameter relu_param = 16;   //relu层参数
    FullyConnectedParameter fully_connected_param = 17; //全连接层参数

}

//relu层参数
message ReLUParameter {
    float negative_slope = 1;  //负数的输入加入运算
    enum Engine {
        DEFAULT = 0;
        CAFFE = 1;
        CUDNN = 2;
    }
    Engine engine = 2;
}

//sigmoid层参数
message SigmoidParameter {
    enum Engine {
        DEFAULT = 0;
        CAFFE = 1;
        CUDNN = 2;
    }
    Engine engine = 1;
}

//全连接层参数
message FullyConnectedParameter {
    uint32 num_output = 1;             //层的输出数量
    bool bias_term = 2;                //是否添加偏置项
    FillerParameter weight_filler = 3; //权重的填充
    FillerParameter bias_filler = 4;   //偏置的填充
    int32 axis = 5;                    //轴/维度
    bool transpose = 6;                //权重矩阵是否转置

}

//池化层参数
message PoolingParameter {
    enum PoolMethod {
        MAX = 0;        //最大池
        AVERAGE = 1;    //平均池
        STOCHASTIC = 2; //随机
    }
    PoolMethod pool = 1;
    uint32 kernel_size = 2; //filter size
    uint32 kernel_h = 5;    //filter h size
    uint32 kernel_w = 6;    //filter w size
    uint32 stride = 3;      //步长
    uint32 stride_h = 7;    //h的步长
    uint32 stride_w = 8;    //w的步长
    uint32 pad = 4;         //补0填充
    uint32 pad_h = 9;       //h的补0填充
    uint32 pad_w = 10;      //w的补0填充

    enum Engine {
        DEFAULT = 0;
        CAFFE = 1;
        CUDNN = 2;
    }
    Engine engine = 11;
    bool global_pooling = 12;

}