// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe.proto

#ifndef PROTOBUF_caffe_2eproto__INCLUDED
#define PROTOBUF_caffe_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_caffe_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsTensorShapeImpl();
void InitDefaultsTensorShape();
void InitDefaultsTensorProtoImpl();
void InitDefaultsTensorProto();
void InitDefaultsTensorProtoListImpl();
void InitDefaultsTensorProtoList();
void InitDefaultsFillerParameterImpl();
void InitDefaultsFillerParameter();
void InitDefaultsLayerParameterImpl();
void InitDefaultsLayerParameter();
void InitDefaultsReLUParameterImpl();
void InitDefaultsReLUParameter();
void InitDefaultsSigmoidParameterImpl();
void InitDefaultsSigmoidParameter();
void InitDefaultsFullyConnectedParameterImpl();
void InitDefaultsFullyConnectedParameter();
void InitDefaultsPoolingParameterImpl();
void InitDefaultsPoolingParameter();
inline void InitDefaults() {
  InitDefaultsTensorShape();
  InitDefaultsTensorProto();
  InitDefaultsTensorProtoList();
  InitDefaultsFillerParameter();
  InitDefaultsLayerParameter();
  InitDefaultsReLUParameter();
  InitDefaultsSigmoidParameter();
  InitDefaultsFullyConnectedParameter();
  InitDefaultsPoolingParameter();
}
}  // namespace protobuf_caffe_2eproto
namespace caffe {
class FillerParameter;
class FillerParameterDefaultTypeInternal;
extern FillerParameterDefaultTypeInternal _FillerParameter_default_instance_;
class FullyConnectedParameter;
class FullyConnectedParameterDefaultTypeInternal;
extern FullyConnectedParameterDefaultTypeInternal _FullyConnectedParameter_default_instance_;
class LayerParameter;
class LayerParameterDefaultTypeInternal;
extern LayerParameterDefaultTypeInternal _LayerParameter_default_instance_;
class PoolingParameter;
class PoolingParameterDefaultTypeInternal;
extern PoolingParameterDefaultTypeInternal _PoolingParameter_default_instance_;
class ReLUParameter;
class ReLUParameterDefaultTypeInternal;
extern ReLUParameterDefaultTypeInternal _ReLUParameter_default_instance_;
class SigmoidParameter;
class SigmoidParameterDefaultTypeInternal;
extern SigmoidParameterDefaultTypeInternal _SigmoidParameter_default_instance_;
class TensorProto;
class TensorProtoDefaultTypeInternal;
extern TensorProtoDefaultTypeInternal _TensorProto_default_instance_;
class TensorProtoList;
class TensorProtoListDefaultTypeInternal;
extern TensorProtoListDefaultTypeInternal _TensorProtoList_default_instance_;
class TensorShape;
class TensorShapeDefaultTypeInternal;
extern TensorShapeDefaultTypeInternal _TensorShape_default_instance_;
}  // namespace caffe
namespace caffe {

enum FillerParameter_VarianceNorm {
  FillerParameter_VarianceNorm_FAN_IN = 0,
  FillerParameter_VarianceNorm_FAN_OUT = 1,
  FillerParameter_VarianceNorm_AVERAGE = 2,
  FillerParameter_VarianceNorm_FillerParameter_VarianceNorm_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FillerParameter_VarianceNorm_FillerParameter_VarianceNorm_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FillerParameter_VarianceNorm_IsValid(int value);
const FillerParameter_VarianceNorm FillerParameter_VarianceNorm_VarianceNorm_MIN = FillerParameter_VarianceNorm_FAN_IN;
const FillerParameter_VarianceNorm FillerParameter_VarianceNorm_VarianceNorm_MAX = FillerParameter_VarianceNorm_AVERAGE;
const int FillerParameter_VarianceNorm_VarianceNorm_ARRAYSIZE = FillerParameter_VarianceNorm_VarianceNorm_MAX + 1;

const ::google::protobuf::EnumDescriptor* FillerParameter_VarianceNorm_descriptor();
inline const ::std::string& FillerParameter_VarianceNorm_Name(FillerParameter_VarianceNorm value) {
  return ::google::protobuf::internal::NameOfEnum(
    FillerParameter_VarianceNorm_descriptor(), value);
}
inline bool FillerParameter_VarianceNorm_Parse(
    const ::std::string& name, FillerParameter_VarianceNorm* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FillerParameter_VarianceNorm>(
    FillerParameter_VarianceNorm_descriptor(), name, value);
}
enum ReLUParameter_Engine {
  ReLUParameter_Engine_DEFAULT = 0,
  ReLUParameter_Engine_CAFFE = 1,
  ReLUParameter_Engine_CUDNN = 2,
  ReLUParameter_Engine_ReLUParameter_Engine_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ReLUParameter_Engine_ReLUParameter_Engine_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ReLUParameter_Engine_IsValid(int value);
const ReLUParameter_Engine ReLUParameter_Engine_Engine_MIN = ReLUParameter_Engine_DEFAULT;
const ReLUParameter_Engine ReLUParameter_Engine_Engine_MAX = ReLUParameter_Engine_CUDNN;
const int ReLUParameter_Engine_Engine_ARRAYSIZE = ReLUParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReLUParameter_Engine_descriptor();
inline const ::std::string& ReLUParameter_Engine_Name(ReLUParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReLUParameter_Engine_descriptor(), value);
}
inline bool ReLUParameter_Engine_Parse(
    const ::std::string& name, ReLUParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReLUParameter_Engine>(
    ReLUParameter_Engine_descriptor(), name, value);
}
enum SigmoidParameter_Engine {
  SigmoidParameter_Engine_DEFAULT = 0,
  SigmoidParameter_Engine_CAFFE = 1,
  SigmoidParameter_Engine_CUDNN = 2,
  SigmoidParameter_Engine_SigmoidParameter_Engine_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SigmoidParameter_Engine_SigmoidParameter_Engine_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SigmoidParameter_Engine_IsValid(int value);
const SigmoidParameter_Engine SigmoidParameter_Engine_Engine_MIN = SigmoidParameter_Engine_DEFAULT;
const SigmoidParameter_Engine SigmoidParameter_Engine_Engine_MAX = SigmoidParameter_Engine_CUDNN;
const int SigmoidParameter_Engine_Engine_ARRAYSIZE = SigmoidParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* SigmoidParameter_Engine_descriptor();
inline const ::std::string& SigmoidParameter_Engine_Name(SigmoidParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    SigmoidParameter_Engine_descriptor(), value);
}
inline bool SigmoidParameter_Engine_Parse(
    const ::std::string& name, SigmoidParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SigmoidParameter_Engine>(
    SigmoidParameter_Engine_descriptor(), name, value);
}
enum PoolingParameter_PoolMethod {
  PoolingParameter_PoolMethod_MAX = 0,
  PoolingParameter_PoolMethod_AVERAGE = 1,
  PoolingParameter_PoolMethod_STOCHASTIC = 2,
  PoolingParameter_PoolMethod_PoolingParameter_PoolMethod_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PoolingParameter_PoolMethod_PoolingParameter_PoolMethod_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PoolingParameter_PoolMethod_IsValid(int value);
const PoolingParameter_PoolMethod PoolingParameter_PoolMethod_PoolMethod_MIN = PoolingParameter_PoolMethod_MAX;
const PoolingParameter_PoolMethod PoolingParameter_PoolMethod_PoolMethod_MAX = PoolingParameter_PoolMethod_STOCHASTIC;
const int PoolingParameter_PoolMethod_PoolMethod_ARRAYSIZE = PoolingParameter_PoolMethod_PoolMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* PoolingParameter_PoolMethod_descriptor();
inline const ::std::string& PoolingParameter_PoolMethod_Name(PoolingParameter_PoolMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    PoolingParameter_PoolMethod_descriptor(), value);
}
inline bool PoolingParameter_PoolMethod_Parse(
    const ::std::string& name, PoolingParameter_PoolMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PoolingParameter_PoolMethod>(
    PoolingParameter_PoolMethod_descriptor(), name, value);
}
enum PoolingParameter_Engine {
  PoolingParameter_Engine_DEFAULT = 0,
  PoolingParameter_Engine_CAFFE = 1,
  PoolingParameter_Engine_CUDNN = 2,
  PoolingParameter_Engine_PoolingParameter_Engine_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PoolingParameter_Engine_PoolingParameter_Engine_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PoolingParameter_Engine_IsValid(int value);
const PoolingParameter_Engine PoolingParameter_Engine_Engine_MIN = PoolingParameter_Engine_DEFAULT;
const PoolingParameter_Engine PoolingParameter_Engine_Engine_MAX = PoolingParameter_Engine_CUDNN;
const int PoolingParameter_Engine_Engine_ARRAYSIZE = PoolingParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* PoolingParameter_Engine_descriptor();
inline const ::std::string& PoolingParameter_Engine_Name(PoolingParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    PoolingParameter_Engine_descriptor(), value);
}
inline bool PoolingParameter_Engine_Parse(
    const ::std::string& name, PoolingParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PoolingParameter_Engine>(
    PoolingParameter_Engine_descriptor(), name, value);
}
enum Phase {
  TRAIN = 0,
  TEST = 1,
  Phase_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Phase_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Phase_IsValid(int value);
const Phase Phase_MIN = TRAIN;
const Phase Phase_MAX = TEST;
const int Phase_ARRAYSIZE = Phase_MAX + 1;

const ::google::protobuf::EnumDescriptor* Phase_descriptor();
inline const ::std::string& Phase_Name(Phase value) {
  return ::google::protobuf::internal::NameOfEnum(
    Phase_descriptor(), value);
}
inline bool Phase_Parse(
    const ::std::string& name, Phase* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Phase>(
    Phase_descriptor(), name, value);
}
// ===================================================================

class TensorShape : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.TensorShape) */ {
 public:
  TensorShape();
  virtual ~TensorShape();

  TensorShape(const TensorShape& from);

  inline TensorShape& operator=(const TensorShape& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TensorShape(TensorShape&& from) noexcept
    : TensorShape() {
    *this = ::std::move(from);
  }

  inline TensorShape& operator=(TensorShape&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TensorShape& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TensorShape* internal_default_instance() {
    return reinterpret_cast<const TensorShape*>(
               &_TensorShape_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TensorShape* other);
  friend void swap(TensorShape& a, TensorShape& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TensorShape* New() const PROTOBUF_FINAL { return New(NULL); }

  TensorShape* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TensorShape& from);
  void MergeFrom(const TensorShape& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TensorShape* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 dim = 1;
  int dim_size() const;
  void clear_dim();
  static const int kDimFieldNumber = 1;
  ::google::protobuf::int64 dim(int index) const;
  void set_dim(int index, ::google::protobuf::int64 value);
  void add_dim(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      dim() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_dim();

  // @@protoc_insertion_point(class_scope:caffe.TensorShape)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > dim_;
  mutable int _dim_cached_byte_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
  friend void ::protobuf_caffe_2eproto::InitDefaultsTensorShapeImpl();
};
// -------------------------------------------------------------------

class TensorProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.TensorProto) */ {
 public:
  TensorProto();
  virtual ~TensorProto();

  TensorProto(const TensorProto& from);

  inline TensorProto& operator=(const TensorProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TensorProto(TensorProto&& from) noexcept
    : TensorProto() {
    *this = ::std::move(from);
  }

  inline TensorProto& operator=(TensorProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TensorProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TensorProto* internal_default_instance() {
    return reinterpret_cast<const TensorProto*>(
               &_TensorProto_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TensorProto* other);
  friend void swap(TensorProto& a, TensorProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TensorProto* New() const PROTOBUF_FINAL { return New(NULL); }

  TensorProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TensorProto& from);
  void MergeFrom(const TensorProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TensorProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float data = 5;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 5;
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::google::protobuf::RepeatedField< float >&
      data() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // repeated float diff = 6;
  int diff_size() const;
  void clear_diff();
  static const int kDiffFieldNumber = 6;
  float diff(int index) const;
  void set_diff(int index, float value);
  void add_diff(float value);
  const ::google::protobuf::RepeatedField< float >&
      diff() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_diff();

  // repeated double double_data = 8;
  int double_data_size() const;
  void clear_double_data();
  static const int kDoubleDataFieldNumber = 8;
  double double_data(int index) const;
  void set_double_data(int index, double value);
  void add_double_data(double value);
  const ::google::protobuf::RepeatedField< double >&
      double_data() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_double_data();

  // repeated double double_diff = 9;
  int double_diff_size() const;
  void clear_double_diff();
  static const int kDoubleDiffFieldNumber = 9;
  double double_diff(int index) const;
  void set_double_diff(int index, double value);
  void add_double_diff(double value);
  const ::google::protobuf::RepeatedField< double >&
      double_diff() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_double_diff();

  // .caffe.TensorShape shape = 7;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 7;
  const ::caffe::TensorShape& shape() const;
  ::caffe::TensorShape* release_shape();
  ::caffe::TensorShape* mutable_shape();
  void set_allocated_shape(::caffe::TensorShape* shape);

  // int32 num = 1;
  void clear_num();
  static const int kNumFieldNumber = 1;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // int32 channels = 2;
  void clear_channels();
  static const int kChannelsFieldNumber = 2;
  ::google::protobuf::int32 channels() const;
  void set_channels(::google::protobuf::int32 value);

  // int32 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // int32 width = 4;
  void clear_width();
  static const int kWidthFieldNumber = 4;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.TensorProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > diff_;
  mutable int _diff_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > double_data_;
  mutable int _double_data_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > double_diff_;
  mutable int _double_diff_cached_byte_size_;
  ::caffe::TensorShape* shape_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 channels_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 width_;
  mutable int _cached_size_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
  friend void ::protobuf_caffe_2eproto::InitDefaultsTensorProtoImpl();
};
// -------------------------------------------------------------------

class TensorProtoList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.TensorProtoList) */ {
 public:
  TensorProtoList();
  virtual ~TensorProtoList();

  TensorProtoList(const TensorProtoList& from);

  inline TensorProtoList& operator=(const TensorProtoList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TensorProtoList(TensorProtoList&& from) noexcept
    : TensorProtoList() {
    *this = ::std::move(from);
  }

  inline TensorProtoList& operator=(TensorProtoList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TensorProtoList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TensorProtoList* internal_default_instance() {
    return reinterpret_cast<const TensorProtoList*>(
               &_TensorProtoList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(TensorProtoList* other);
  friend void swap(TensorProtoList& a, TensorProtoList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TensorProtoList* New() const PROTOBUF_FINAL { return New(NULL); }

  TensorProtoList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TensorProtoList& from);
  void MergeFrom(const TensorProtoList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TensorProtoList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.TensorProto tensors = 1;
  int tensors_size() const;
  void clear_tensors();
  static const int kTensorsFieldNumber = 1;
  const ::caffe::TensorProto& tensors(int index) const;
  ::caffe::TensorProto* mutable_tensors(int index);
  ::caffe::TensorProto* add_tensors();
  ::google::protobuf::RepeatedPtrField< ::caffe::TensorProto >*
      mutable_tensors();
  const ::google::protobuf::RepeatedPtrField< ::caffe::TensorProto >&
      tensors() const;

  // @@protoc_insertion_point(class_scope:caffe.TensorProtoList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::caffe::TensorProto > tensors_;
  mutable int _cached_size_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
  friend void ::protobuf_caffe_2eproto::InitDefaultsTensorProtoListImpl();
};
// -------------------------------------------------------------------

class FillerParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.FillerParameter) */ {
 public:
  FillerParameter();
  virtual ~FillerParameter();

  FillerParameter(const FillerParameter& from);

  inline FillerParameter& operator=(const FillerParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FillerParameter(FillerParameter&& from) noexcept
    : FillerParameter() {
    *this = ::std::move(from);
  }

  inline FillerParameter& operator=(FillerParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FillerParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FillerParameter* internal_default_instance() {
    return reinterpret_cast<const FillerParameter*>(
               &_FillerParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(FillerParameter* other);
  friend void swap(FillerParameter& a, FillerParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FillerParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  FillerParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FillerParameter& from);
  void MergeFrom(const FillerParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FillerParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef FillerParameter_VarianceNorm VarianceNorm;
  static const VarianceNorm FAN_IN =
    FillerParameter_VarianceNorm_FAN_IN;
  static const VarianceNorm FAN_OUT =
    FillerParameter_VarianceNorm_FAN_OUT;
  static const VarianceNorm AVERAGE =
    FillerParameter_VarianceNorm_AVERAGE;
  static inline bool VarianceNorm_IsValid(int value) {
    return FillerParameter_VarianceNorm_IsValid(value);
  }
  static const VarianceNorm VarianceNorm_MIN =
    FillerParameter_VarianceNorm_VarianceNorm_MIN;
  static const VarianceNorm VarianceNorm_MAX =
    FillerParameter_VarianceNorm_VarianceNorm_MAX;
  static const int VarianceNorm_ARRAYSIZE =
    FillerParameter_VarianceNorm_VarianceNorm_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VarianceNorm_descriptor() {
    return FillerParameter_VarianceNorm_descriptor();
  }
  static inline const ::std::string& VarianceNorm_Name(VarianceNorm value) {
    return FillerParameter_VarianceNorm_Name(value);
  }
  static inline bool VarianceNorm_Parse(const ::std::string& name,
      VarianceNorm* value) {
    return FillerParameter_VarianceNorm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // float value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  float value() const;
  void set_value(float value);

  // float min = 3;
  void clear_min();
  static const int kMinFieldNumber = 3;
  float min() const;
  void set_min(float value);

  // float max = 4;
  void clear_max();
  static const int kMaxFieldNumber = 4;
  float max() const;
  void set_max(float value);

  // float mean = 5;
  void clear_mean();
  static const int kMeanFieldNumber = 5;
  float mean() const;
  void set_mean(float value);

  // float stddev = 6;
  void clear_stddev();
  static const int kStddevFieldNumber = 6;
  float stddev() const;
  void set_stddev(float value);

  // int32 sparse = 7;
  void clear_sparse();
  static const int kSparseFieldNumber = 7;
  ::google::protobuf::int32 sparse() const;
  void set_sparse(::google::protobuf::int32 value);

  // .caffe.FillerParameter.VarianceNorm variance_norm = 8;
  void clear_variance_norm();
  static const int kVarianceNormFieldNumber = 8;
  ::caffe::FillerParameter_VarianceNorm variance_norm() const;
  void set_variance_norm(::caffe::FillerParameter_VarianceNorm value);

  // @@protoc_insertion_point(class_scope:caffe.FillerParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  float value_;
  float min_;
  float max_;
  float mean_;
  float stddev_;
  ::google::protobuf::int32 sparse_;
  int variance_norm_;
  mutable int _cached_size_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
  friend void ::protobuf_caffe_2eproto::InitDefaultsFillerParameterImpl();
};
// -------------------------------------------------------------------

class LayerParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LayerParameter) */ {
 public:
  LayerParameter();
  virtual ~LayerParameter();

  LayerParameter(const LayerParameter& from);

  inline LayerParameter& operator=(const LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LayerParameter(LayerParameter&& from) noexcept
    : LayerParameter() {
    *this = ::std::move(from);
  }

  inline LayerParameter& operator=(LayerParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LayerParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LayerParameter* internal_default_instance() {
    return reinterpret_cast<const LayerParameter*>(
               &_LayerParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(LayerParameter* other);
  friend void swap(LayerParameter& a, LayerParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LayerParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  LayerParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LayerParameter& from);
  void MergeFrom(const LayerParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LayerParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float loss_weight = 5;
  int loss_weight_size() const;
  void clear_loss_weight();
  static const int kLossWeightFieldNumber = 5;
  float loss_weight(int index) const;
  void set_loss_weight(int index, float value);
  void add_loss_weight(float value);
  const ::google::protobuf::RepeatedField< float >&
      loss_weight() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_loss_weight();

  // repeated .caffe.TensorProto weights = 6;
  int weights_size() const;
  void clear_weights();
  static const int kWeightsFieldNumber = 6;
  const ::caffe::TensorProto& weights(int index) const;
  ::caffe::TensorProto* mutable_weights(int index);
  ::caffe::TensorProto* add_weights();
  ::google::protobuf::RepeatedPtrField< ::caffe::TensorProto >*
      mutable_weights();
  const ::google::protobuf::RepeatedPtrField< ::caffe::TensorProto >&
      weights() const;

  // repeated bool propagate_down = 7;
  int propagate_down_size() const;
  void clear_propagate_down();
  static const int kPropagateDownFieldNumber = 7;
  bool propagate_down(int index) const;
  void set_propagate_down(int index, bool value);
  void add_propagate_down(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      propagate_down() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_propagate_down();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string bottom = 3;
  void clear_bottom();
  static const int kBottomFieldNumber = 3;
  const ::std::string& bottom() const;
  void set_bottom(const ::std::string& value);
  #if LANG_CXX11
  void set_bottom(::std::string&& value);
  #endif
  void set_bottom(const char* value);
  void set_bottom(const char* value, size_t size);
  ::std::string* mutable_bottom();
  ::std::string* release_bottom();
  void set_allocated_bottom(::std::string* bottom);

  // string top = 4;
  void clear_top();
  static const int kTopFieldNumber = 4;
  const ::std::string& top() const;
  void set_top(const ::std::string& value);
  #if LANG_CXX11
  void set_top(::std::string&& value);
  #endif
  void set_top(const char* value);
  void set_top(const char* value, size_t size);
  ::std::string* mutable_top();
  ::std::string* release_top();
  void set_allocated_top(::std::string* top);

  // .caffe.ReLUParameter relu_param = 16;
  bool has_relu_param() const;
  void clear_relu_param();
  static const int kReluParamFieldNumber = 16;
  const ::caffe::ReLUParameter& relu_param() const;
  ::caffe::ReLUParameter* release_relu_param();
  ::caffe::ReLUParameter* mutable_relu_param();
  void set_allocated_relu_param(::caffe::ReLUParameter* relu_param);

  // .caffe.SigmoidParameter sigmoid_param = 17;
  bool has_sigmoid_param() const;
  void clear_sigmoid_param();
  static const int kSigmoidParamFieldNumber = 17;
  const ::caffe::SigmoidParameter& sigmoid_param() const;
  ::caffe::SigmoidParameter* release_sigmoid_param();
  ::caffe::SigmoidParameter* mutable_sigmoid_param();
  void set_allocated_sigmoid_param(::caffe::SigmoidParameter* sigmoid_param);

  // .caffe.FullyConnectedParameter fully_connected_param = 18;
  bool has_fully_connected_param() const;
  void clear_fully_connected_param();
  static const int kFullyConnectedParamFieldNumber = 18;
  const ::caffe::FullyConnectedParameter& fully_connected_param() const;
  ::caffe::FullyConnectedParameter* release_fully_connected_param();
  ::caffe::FullyConnectedParameter* mutable_fully_connected_param();
  void set_allocated_fully_connected_param(::caffe::FullyConnectedParameter* fully_connected_param);

  // .caffe.Phase phase = 10;
  void clear_phase();
  static const int kPhaseFieldNumber = 10;
  ::caffe::Phase phase() const;
  void set_phase(::caffe::Phase value);

  // @@protoc_insertion_point(class_scope:caffe.LayerParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > loss_weight_;
  mutable int _loss_weight_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::TensorProto > weights_;
  ::google::protobuf::RepeatedField< bool > propagate_down_;
  mutable int _propagate_down_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr bottom_;
  ::google::protobuf::internal::ArenaStringPtr top_;
  ::caffe::ReLUParameter* relu_param_;
  ::caffe::SigmoidParameter* sigmoid_param_;
  ::caffe::FullyConnectedParameter* fully_connected_param_;
  int phase_;
  mutable int _cached_size_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
  friend void ::protobuf_caffe_2eproto::InitDefaultsLayerParameterImpl();
};
// -------------------------------------------------------------------

class ReLUParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ReLUParameter) */ {
 public:
  ReLUParameter();
  virtual ~ReLUParameter();

  ReLUParameter(const ReLUParameter& from);

  inline ReLUParameter& operator=(const ReLUParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReLUParameter(ReLUParameter&& from) noexcept
    : ReLUParameter() {
    *this = ::std::move(from);
  }

  inline ReLUParameter& operator=(ReLUParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReLUParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReLUParameter* internal_default_instance() {
    return reinterpret_cast<const ReLUParameter*>(
               &_ReLUParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(ReLUParameter* other);
  friend void swap(ReLUParameter& a, ReLUParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReLUParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ReLUParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReLUParameter& from);
  void MergeFrom(const ReLUParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReLUParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ReLUParameter_Engine Engine;
  static const Engine DEFAULT =
    ReLUParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    ReLUParameter_Engine_CAFFE;
  static const Engine CUDNN =
    ReLUParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return ReLUParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    ReLUParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    ReLUParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    ReLUParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return ReLUParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return ReLUParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return ReLUParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // float negative_slope = 1;
  void clear_negative_slope();
  static const int kNegativeSlopeFieldNumber = 1;
  float negative_slope() const;
  void set_negative_slope(float value);

  // .caffe.ReLUParameter.Engine engine = 2;
  void clear_engine();
  static const int kEngineFieldNumber = 2;
  ::caffe::ReLUParameter_Engine engine() const;
  void set_engine(::caffe::ReLUParameter_Engine value);

  // @@protoc_insertion_point(class_scope:caffe.ReLUParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float negative_slope_;
  int engine_;
  mutable int _cached_size_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
  friend void ::protobuf_caffe_2eproto::InitDefaultsReLUParameterImpl();
};
// -------------------------------------------------------------------

class SigmoidParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SigmoidParameter) */ {
 public:
  SigmoidParameter();
  virtual ~SigmoidParameter();

  SigmoidParameter(const SigmoidParameter& from);

  inline SigmoidParameter& operator=(const SigmoidParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SigmoidParameter(SigmoidParameter&& from) noexcept
    : SigmoidParameter() {
    *this = ::std::move(from);
  }

  inline SigmoidParameter& operator=(SigmoidParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SigmoidParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SigmoidParameter* internal_default_instance() {
    return reinterpret_cast<const SigmoidParameter*>(
               &_SigmoidParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(SigmoidParameter* other);
  friend void swap(SigmoidParameter& a, SigmoidParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SigmoidParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  SigmoidParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SigmoidParameter& from);
  void MergeFrom(const SigmoidParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SigmoidParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SigmoidParameter_Engine Engine;
  static const Engine DEFAULT =
    SigmoidParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    SigmoidParameter_Engine_CAFFE;
  static const Engine CUDNN =
    SigmoidParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return SigmoidParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    SigmoidParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    SigmoidParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    SigmoidParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return SigmoidParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return SigmoidParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return SigmoidParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .caffe.SigmoidParameter.Engine engine = 1;
  void clear_engine();
  static const int kEngineFieldNumber = 1;
  ::caffe::SigmoidParameter_Engine engine() const;
  void set_engine(::caffe::SigmoidParameter_Engine value);

  // @@protoc_insertion_point(class_scope:caffe.SigmoidParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int engine_;
  mutable int _cached_size_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
  friend void ::protobuf_caffe_2eproto::InitDefaultsSigmoidParameterImpl();
};
// -------------------------------------------------------------------

class FullyConnectedParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.FullyConnectedParameter) */ {
 public:
  FullyConnectedParameter();
  virtual ~FullyConnectedParameter();

  FullyConnectedParameter(const FullyConnectedParameter& from);

  inline FullyConnectedParameter& operator=(const FullyConnectedParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FullyConnectedParameter(FullyConnectedParameter&& from) noexcept
    : FullyConnectedParameter() {
    *this = ::std::move(from);
  }

  inline FullyConnectedParameter& operator=(FullyConnectedParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FullyConnectedParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FullyConnectedParameter* internal_default_instance() {
    return reinterpret_cast<const FullyConnectedParameter*>(
               &_FullyConnectedParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(FullyConnectedParameter* other);
  friend void swap(FullyConnectedParameter& a, FullyConnectedParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FullyConnectedParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  FullyConnectedParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FullyConnectedParameter& from);
  void MergeFrom(const FullyConnectedParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FullyConnectedParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .caffe.FillerParameter weight_filler = 3;
  bool has_weight_filler() const;
  void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 3;
  const ::caffe::FillerParameter& weight_filler() const;
  ::caffe::FillerParameter* release_weight_filler();
  ::caffe::FillerParameter* mutable_weight_filler();
  void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // .caffe.FillerParameter bias_filler = 4;
  bool has_bias_filler() const;
  void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 4;
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* release_bias_filler();
  ::caffe::FillerParameter* mutable_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // uint32 num_output = 1;
  void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  ::google::protobuf::uint32 num_output() const;
  void set_num_output(::google::protobuf::uint32 value);

  // bool bias_term = 2;
  void clear_bias_term();
  static const int kBiasTermFieldNumber = 2;
  bool bias_term() const;
  void set_bias_term(bool value);

  // bool transpose = 6;
  void clear_transpose();
  static const int kTransposeFieldNumber = 6;
  bool transpose() const;
  void set_transpose(bool value);

  // int32 axis = 5;
  void clear_axis();
  static const int kAxisFieldNumber = 5;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.FullyConnectedParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::caffe::FillerParameter* weight_filler_;
  ::caffe::FillerParameter* bias_filler_;
  ::google::protobuf::uint32 num_output_;
  bool bias_term_;
  bool transpose_;
  ::google::protobuf::int32 axis_;
  mutable int _cached_size_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
  friend void ::protobuf_caffe_2eproto::InitDefaultsFullyConnectedParameterImpl();
};
// -------------------------------------------------------------------

class PoolingParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PoolingParameter) */ {
 public:
  PoolingParameter();
  virtual ~PoolingParameter();

  PoolingParameter(const PoolingParameter& from);

  inline PoolingParameter& operator=(const PoolingParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PoolingParameter(PoolingParameter&& from) noexcept
    : PoolingParameter() {
    *this = ::std::move(from);
  }

  inline PoolingParameter& operator=(PoolingParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PoolingParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PoolingParameter* internal_default_instance() {
    return reinterpret_cast<const PoolingParameter*>(
               &_PoolingParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(PoolingParameter* other);
  friend void swap(PoolingParameter& a, PoolingParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PoolingParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  PoolingParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PoolingParameter& from);
  void MergeFrom(const PoolingParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PoolingParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PoolingParameter_PoolMethod PoolMethod;
  static const PoolMethod MAX =
    PoolingParameter_PoolMethod_MAX;
  static const PoolMethod AVERAGE =
    PoolingParameter_PoolMethod_AVERAGE;
  static const PoolMethod STOCHASTIC =
    PoolingParameter_PoolMethod_STOCHASTIC;
  static inline bool PoolMethod_IsValid(int value) {
    return PoolingParameter_PoolMethod_IsValid(value);
  }
  static const PoolMethod PoolMethod_MIN =
    PoolingParameter_PoolMethod_PoolMethod_MIN;
  static const PoolMethod PoolMethod_MAX =
    PoolingParameter_PoolMethod_PoolMethod_MAX;
  static const int PoolMethod_ARRAYSIZE =
    PoolingParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PoolMethod_descriptor() {
    return PoolingParameter_PoolMethod_descriptor();
  }
  static inline const ::std::string& PoolMethod_Name(PoolMethod value) {
    return PoolingParameter_PoolMethod_Name(value);
  }
  static inline bool PoolMethod_Parse(const ::std::string& name,
      PoolMethod* value) {
    return PoolingParameter_PoolMethod_Parse(name, value);
  }

  typedef PoolingParameter_Engine Engine;
  static const Engine DEFAULT =
    PoolingParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    PoolingParameter_Engine_CAFFE;
  static const Engine CUDNN =
    PoolingParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return PoolingParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    PoolingParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    PoolingParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    PoolingParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return PoolingParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return PoolingParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return PoolingParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .caffe.PoolingParameter.PoolMethod pool = 1;
  void clear_pool();
  static const int kPoolFieldNumber = 1;
  ::caffe::PoolingParameter_PoolMethod pool() const;
  void set_pool(::caffe::PoolingParameter_PoolMethod value);

  // uint32 kernel_size = 2;
  void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 2;
  ::google::protobuf::uint32 kernel_size() const;
  void set_kernel_size(::google::protobuf::uint32 value);

  // uint32 stride = 3;
  void clear_stride();
  static const int kStrideFieldNumber = 3;
  ::google::protobuf::uint32 stride() const;
  void set_stride(::google::protobuf::uint32 value);

  // uint32 pad = 4;
  void clear_pad();
  static const int kPadFieldNumber = 4;
  ::google::protobuf::uint32 pad() const;
  void set_pad(::google::protobuf::uint32 value);

  // uint32 kernel_h = 5;
  void clear_kernel_h();
  static const int kKernelHFieldNumber = 5;
  ::google::protobuf::uint32 kernel_h() const;
  void set_kernel_h(::google::protobuf::uint32 value);

  // uint32 kernel_w = 6;
  void clear_kernel_w();
  static const int kKernelWFieldNumber = 6;
  ::google::protobuf::uint32 kernel_w() const;
  void set_kernel_w(::google::protobuf::uint32 value);

  // uint32 stride_h = 7;
  void clear_stride_h();
  static const int kStrideHFieldNumber = 7;
  ::google::protobuf::uint32 stride_h() const;
  void set_stride_h(::google::protobuf::uint32 value);

  // uint32 stride_w = 8;
  void clear_stride_w();
  static const int kStrideWFieldNumber = 8;
  ::google::protobuf::uint32 stride_w() const;
  void set_stride_w(::google::protobuf::uint32 value);

  // uint32 pad_h = 9;
  void clear_pad_h();
  static const int kPadHFieldNumber = 9;
  ::google::protobuf::uint32 pad_h() const;
  void set_pad_h(::google::protobuf::uint32 value);

  // uint32 pad_w = 10;
  void clear_pad_w();
  static const int kPadWFieldNumber = 10;
  ::google::protobuf::uint32 pad_w() const;
  void set_pad_w(::google::protobuf::uint32 value);

  // .caffe.PoolingParameter.Engine engine = 11;
  void clear_engine();
  static const int kEngineFieldNumber = 11;
  ::caffe::PoolingParameter_Engine engine() const;
  void set_engine(::caffe::PoolingParameter_Engine value);

  // bool global_pooling = 12;
  void clear_global_pooling();
  static const int kGlobalPoolingFieldNumber = 12;
  bool global_pooling() const;
  void set_global_pooling(bool value);

  // @@protoc_insertion_point(class_scope:caffe.PoolingParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int pool_;
  ::google::protobuf::uint32 kernel_size_;
  ::google::protobuf::uint32 stride_;
  ::google::protobuf::uint32 pad_;
  ::google::protobuf::uint32 kernel_h_;
  ::google::protobuf::uint32 kernel_w_;
  ::google::protobuf::uint32 stride_h_;
  ::google::protobuf::uint32 stride_w_;
  ::google::protobuf::uint32 pad_h_;
  ::google::protobuf::uint32 pad_w_;
  int engine_;
  bool global_pooling_;
  mutable int _cached_size_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
  friend void ::protobuf_caffe_2eproto::InitDefaultsPoolingParameterImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TensorShape

// repeated int64 dim = 1;
inline int TensorShape::dim_size() const {
  return dim_.size();
}
inline void TensorShape::clear_dim() {
  dim_.Clear();
}
inline ::google::protobuf::int64 TensorShape::dim(int index) const {
  // @@protoc_insertion_point(field_get:caffe.TensorShape.dim)
  return dim_.Get(index);
}
inline void TensorShape::set_dim(int index, ::google::protobuf::int64 value) {
  dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.TensorShape.dim)
}
inline void TensorShape::add_dim(::google::protobuf::int64 value) {
  dim_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.TensorShape.dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TensorShape::dim() const {
  // @@protoc_insertion_point(field_list:caffe.TensorShape.dim)
  return dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TensorShape::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:caffe.TensorShape.dim)
  return &dim_;
}

// -------------------------------------------------------------------

// TensorProto

// int32 num = 1;
inline void TensorProto::clear_num() {
  num_ = 0;
}
inline ::google::protobuf::int32 TensorProto::num() const {
  // @@protoc_insertion_point(field_get:caffe.TensorProto.num)
  return num_;
}
inline void TensorProto::set_num(::google::protobuf::int32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:caffe.TensorProto.num)
}

// int32 channels = 2;
inline void TensorProto::clear_channels() {
  channels_ = 0;
}
inline ::google::protobuf::int32 TensorProto::channels() const {
  // @@protoc_insertion_point(field_get:caffe.TensorProto.channels)
  return channels_;
}
inline void TensorProto::set_channels(::google::protobuf::int32 value) {
  
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.TensorProto.channels)
}

// int32 height = 3;
inline void TensorProto::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 TensorProto::height() const {
  // @@protoc_insertion_point(field_get:caffe.TensorProto.height)
  return height_;
}
inline void TensorProto::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.TensorProto.height)
}

// int32 width = 4;
inline void TensorProto::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 TensorProto::width() const {
  // @@protoc_insertion_point(field_get:caffe.TensorProto.width)
  return width_;
}
inline void TensorProto::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.TensorProto.width)
}

// repeated float data = 5;
inline int TensorProto::data_size() const {
  return data_.size();
}
inline void TensorProto::clear_data() {
  data_.Clear();
}
inline float TensorProto::data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.TensorProto.data)
  return data_.Get(index);
}
inline void TensorProto::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.TensorProto.data)
}
inline void TensorProto::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.TensorProto.data)
}
inline const ::google::protobuf::RepeatedField< float >&
TensorProto::data() const {
  // @@protoc_insertion_point(field_list:caffe.TensorProto.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
TensorProto::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.TensorProto.data)
  return &data_;
}

// repeated float diff = 6;
inline int TensorProto::diff_size() const {
  return diff_.size();
}
inline void TensorProto::clear_diff() {
  diff_.Clear();
}
inline float TensorProto::diff(int index) const {
  // @@protoc_insertion_point(field_get:caffe.TensorProto.diff)
  return diff_.Get(index);
}
inline void TensorProto::set_diff(int index, float value) {
  diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.TensorProto.diff)
}
inline void TensorProto::add_diff(float value) {
  diff_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.TensorProto.diff)
}
inline const ::google::protobuf::RepeatedField< float >&
TensorProto::diff() const {
  // @@protoc_insertion_point(field_list:caffe.TensorProto.diff)
  return diff_;
}
inline ::google::protobuf::RepeatedField< float >*
TensorProto::mutable_diff() {
  // @@protoc_insertion_point(field_mutable_list:caffe.TensorProto.diff)
  return &diff_;
}

// repeated double double_data = 8;
inline int TensorProto::double_data_size() const {
  return double_data_.size();
}
inline void TensorProto::clear_double_data() {
  double_data_.Clear();
}
inline double TensorProto::double_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.TensorProto.double_data)
  return double_data_.Get(index);
}
inline void TensorProto::set_double_data(int index, double value) {
  double_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.TensorProto.double_data)
}
inline void TensorProto::add_double_data(double value) {
  double_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.TensorProto.double_data)
}
inline const ::google::protobuf::RepeatedField< double >&
TensorProto::double_data() const {
  // @@protoc_insertion_point(field_list:caffe.TensorProto.double_data)
  return double_data_;
}
inline ::google::protobuf::RepeatedField< double >*
TensorProto::mutable_double_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.TensorProto.double_data)
  return &double_data_;
}

// repeated double double_diff = 9;
inline int TensorProto::double_diff_size() const {
  return double_diff_.size();
}
inline void TensorProto::clear_double_diff() {
  double_diff_.Clear();
}
inline double TensorProto::double_diff(int index) const {
  // @@protoc_insertion_point(field_get:caffe.TensorProto.double_diff)
  return double_diff_.Get(index);
}
inline void TensorProto::set_double_diff(int index, double value) {
  double_diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.TensorProto.double_diff)
}
inline void TensorProto::add_double_diff(double value) {
  double_diff_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.TensorProto.double_diff)
}
inline const ::google::protobuf::RepeatedField< double >&
TensorProto::double_diff() const {
  // @@protoc_insertion_point(field_list:caffe.TensorProto.double_diff)
  return double_diff_;
}
inline ::google::protobuf::RepeatedField< double >*
TensorProto::mutable_double_diff() {
  // @@protoc_insertion_point(field_mutable_list:caffe.TensorProto.double_diff)
  return &double_diff_;
}

// .caffe.TensorShape shape = 7;
inline bool TensorProto::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
inline void TensorProto::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) {
    delete shape_;
  }
  shape_ = NULL;
}
inline const ::caffe::TensorShape& TensorProto::shape() const {
  const ::caffe::TensorShape* p = shape_;
  // @@protoc_insertion_point(field_get:caffe.TensorProto.shape)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::TensorShape*>(
      &::caffe::_TensorShape_default_instance_);
}
inline ::caffe::TensorShape* TensorProto::release_shape() {
  // @@protoc_insertion_point(field_release:caffe.TensorProto.shape)
  
  ::caffe::TensorShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline ::caffe::TensorShape* TensorProto::mutable_shape() {
  
  if (shape_ == NULL) {
    shape_ = new ::caffe::TensorShape;
  }
  // @@protoc_insertion_point(field_mutable:caffe.TensorProto.shape)
  return shape_;
}
inline void TensorProto::set_allocated_shape(::caffe::TensorShape* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shape_;
  }
  if (shape) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      shape = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    
  } else {
    
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:caffe.TensorProto.shape)
}

// -------------------------------------------------------------------

// TensorProtoList

// repeated .caffe.TensorProto tensors = 1;
inline int TensorProtoList::tensors_size() const {
  return tensors_.size();
}
inline void TensorProtoList::clear_tensors() {
  tensors_.Clear();
}
inline const ::caffe::TensorProto& TensorProtoList::tensors(int index) const {
  // @@protoc_insertion_point(field_get:caffe.TensorProtoList.tensors)
  return tensors_.Get(index);
}
inline ::caffe::TensorProto* TensorProtoList::mutable_tensors(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.TensorProtoList.tensors)
  return tensors_.Mutable(index);
}
inline ::caffe::TensorProto* TensorProtoList::add_tensors() {
  // @@protoc_insertion_point(field_add:caffe.TensorProtoList.tensors)
  return tensors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::TensorProto >*
TensorProtoList::mutable_tensors() {
  // @@protoc_insertion_point(field_mutable_list:caffe.TensorProtoList.tensors)
  return &tensors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::TensorProto >&
TensorProtoList::tensors() const {
  // @@protoc_insertion_point(field_list:caffe.TensorProtoList.tensors)
  return tensors_;
}

// -------------------------------------------------------------------

// FillerParameter

// string type = 1;
inline void FillerParameter::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FillerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.type)
  return type_.GetNoArena();
}
inline void FillerParameter::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.type)
}
#if LANG_CXX11
inline void FillerParameter::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.FillerParameter.type)
}
#endif
inline void FillerParameter::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.FillerParameter.type)
}
inline void FillerParameter::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.FillerParameter.type)
}
inline ::std::string* FillerParameter::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:caffe.FillerParameter.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FillerParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.FillerParameter.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FillerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe.FillerParameter.type)
}

// float value = 2;
inline void FillerParameter::clear_value() {
  value_ = 0;
}
inline float FillerParameter::value() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.value)
  return value_;
}
inline void FillerParameter::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.value)
}

// float min = 3;
inline void FillerParameter::clear_min() {
  min_ = 0;
}
inline float FillerParameter::min() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.min)
  return min_;
}
inline void FillerParameter::set_min(float value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.min)
}

// float max = 4;
inline void FillerParameter::clear_max() {
  max_ = 0;
}
inline float FillerParameter::max() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.max)
  return max_;
}
inline void FillerParameter::set_max(float value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.max)
}

// float mean = 5;
inline void FillerParameter::clear_mean() {
  mean_ = 0;
}
inline float FillerParameter::mean() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.mean)
  return mean_;
}
inline void FillerParameter::set_mean(float value) {
  
  mean_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.mean)
}

// float stddev = 6;
inline void FillerParameter::clear_stddev() {
  stddev_ = 0;
}
inline float FillerParameter::stddev() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.stddev)
  return stddev_;
}
inline void FillerParameter::set_stddev(float value) {
  
  stddev_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.stddev)
}

// int32 sparse = 7;
inline void FillerParameter::clear_sparse() {
  sparse_ = 0;
}
inline ::google::protobuf::int32 FillerParameter::sparse() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.sparse)
  return sparse_;
}
inline void FillerParameter::set_sparse(::google::protobuf::int32 value) {
  
  sparse_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.sparse)
}

// .caffe.FillerParameter.VarianceNorm variance_norm = 8;
inline void FillerParameter::clear_variance_norm() {
  variance_norm_ = 0;
}
inline ::caffe::FillerParameter_VarianceNorm FillerParameter::variance_norm() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.variance_norm)
  return static_cast< ::caffe::FillerParameter_VarianceNorm >(variance_norm_);
}
inline void FillerParameter::set_variance_norm(::caffe::FillerParameter_VarianceNorm value) {
  
  variance_norm_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.variance_norm)
}

// -------------------------------------------------------------------

// LayerParameter

// string name = 1;
inline void LayerParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.name)
  return name_.GetNoArena();
}
inline void LayerParameter::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.name)
}
#if LANG_CXX11
inline void LayerParameter::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.LayerParameter.name)
}
#endif
inline void LayerParameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.name)
}
inline void LayerParameter::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.name)
}
inline ::std::string* LayerParameter::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LayerParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.name)
}

// string type = 2;
inline void LayerParameter::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.type)
  return type_.GetNoArena();
}
inline void LayerParameter::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.type)
}
#if LANG_CXX11
inline void LayerParameter::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.LayerParameter.type)
}
#endif
inline void LayerParameter::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.type)
}
inline void LayerParameter::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.type)
}
inline ::std::string* LayerParameter::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LayerParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LayerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.type)
}

// string bottom = 3;
inline void LayerParameter::clear_bottom() {
  bottom_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LayerParameter::bottom() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bottom)
  return bottom_.GetNoArena();
}
inline void LayerParameter::set_bottom(const ::std::string& value) {
  
  bottom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.bottom)
}
#if LANG_CXX11
inline void LayerParameter::set_bottom(::std::string&& value) {
  
  bottom_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.LayerParameter.bottom)
}
#endif
inline void LayerParameter::set_bottom(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bottom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.bottom)
}
inline void LayerParameter::set_bottom(const char* value, size_t size) {
  
  bottom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.bottom)
}
inline ::std::string* LayerParameter::mutable_bottom() {
  
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bottom)
  return bottom_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LayerParameter::release_bottom() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.bottom)
  
  return bottom_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LayerParameter::set_allocated_bottom(::std::string* bottom) {
  if (bottom != NULL) {
    
  } else {
    
  }
  bottom_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bottom);
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.bottom)
}

// string top = 4;
inline void LayerParameter::clear_top() {
  top_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LayerParameter::top() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.top)
  return top_.GetNoArena();
}
inline void LayerParameter::set_top(const ::std::string& value) {
  
  top_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.top)
}
#if LANG_CXX11
inline void LayerParameter::set_top(::std::string&& value) {
  
  top_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.LayerParameter.top)
}
#endif
inline void LayerParameter::set_top(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  top_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.top)
}
inline void LayerParameter::set_top(const char* value, size_t size) {
  
  top_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.top)
}
inline ::std::string* LayerParameter::mutable_top() {
  
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.top)
  return top_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LayerParameter::release_top() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.top)
  
  return top_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LayerParameter::set_allocated_top(::std::string* top) {
  if (top != NULL) {
    
  } else {
    
  }
  top_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), top);
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.top)
}

// repeated float loss_weight = 5;
inline int LayerParameter::loss_weight_size() const {
  return loss_weight_.size();
}
inline void LayerParameter::clear_loss_weight() {
  loss_weight_.Clear();
}
inline float LayerParameter::loss_weight(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.loss_weight)
  return loss_weight_.Get(index);
}
inline void LayerParameter::set_loss_weight(int index, float value) {
  loss_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.loss_weight)
}
inline void LayerParameter::add_loss_weight(float value) {
  loss_weight_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.loss_weight)
}
inline const ::google::protobuf::RepeatedField< float >&
LayerParameter::loss_weight() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.loss_weight)
  return loss_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
LayerParameter::mutable_loss_weight() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.loss_weight)
  return &loss_weight_;
}

// repeated .caffe.TensorProto weights = 6;
inline int LayerParameter::weights_size() const {
  return weights_.size();
}
inline void LayerParameter::clear_weights() {
  weights_.Clear();
}
inline const ::caffe::TensorProto& LayerParameter::weights(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.weights)
  return weights_.Get(index);
}
inline ::caffe::TensorProto* LayerParameter::mutable_weights(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.weights)
  return weights_.Mutable(index);
}
inline ::caffe::TensorProto* LayerParameter::add_weights() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.weights)
  return weights_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::TensorProto >*
LayerParameter::mutable_weights() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.weights)
  return &weights_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::TensorProto >&
LayerParameter::weights() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.weights)
  return weights_;
}

// repeated bool propagate_down = 7;
inline int LayerParameter::propagate_down_size() const {
  return propagate_down_.size();
}
inline void LayerParameter::clear_propagate_down() {
  propagate_down_.Clear();
}
inline bool LayerParameter::propagate_down(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.propagate_down)
  return propagate_down_.Get(index);
}
inline void LayerParameter::set_propagate_down(int index, bool value) {
  propagate_down_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.propagate_down)
}
inline void LayerParameter::add_propagate_down(bool value) {
  propagate_down_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.propagate_down)
}
inline const ::google::protobuf::RepeatedField< bool >&
LayerParameter::propagate_down() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.propagate_down)
  return propagate_down_;
}
inline ::google::protobuf::RepeatedField< bool >*
LayerParameter::mutable_propagate_down() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.propagate_down)
  return &propagate_down_;
}

// .caffe.Phase phase = 10;
inline void LayerParameter::clear_phase() {
  phase_ = 0;
}
inline ::caffe::Phase LayerParameter::phase() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.phase)
  return static_cast< ::caffe::Phase >(phase_);
}
inline void LayerParameter::set_phase(::caffe::Phase value) {
  
  phase_ = value;
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.phase)
}

// .caffe.ReLUParameter relu_param = 16;
inline bool LayerParameter::has_relu_param() const {
  return this != internal_default_instance() && relu_param_ != NULL;
}
inline void LayerParameter::clear_relu_param() {
  if (GetArenaNoVirtual() == NULL && relu_param_ != NULL) {
    delete relu_param_;
  }
  relu_param_ = NULL;
}
inline const ::caffe::ReLUParameter& LayerParameter::relu_param() const {
  const ::caffe::ReLUParameter* p = relu_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.relu_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ReLUParameter*>(
      &::caffe::_ReLUParameter_default_instance_);
}
inline ::caffe::ReLUParameter* LayerParameter::release_relu_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.relu_param)
  
  ::caffe::ReLUParameter* temp = relu_param_;
  relu_param_ = NULL;
  return temp;
}
inline ::caffe::ReLUParameter* LayerParameter::mutable_relu_param() {
  
  if (relu_param_ == NULL) {
    relu_param_ = new ::caffe::ReLUParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.relu_param)
  return relu_param_;
}
inline void LayerParameter::set_allocated_relu_param(::caffe::ReLUParameter* relu_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete relu_param_;
  }
  if (relu_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      relu_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, relu_param, submessage_arena);
    }
    
  } else {
    
  }
  relu_param_ = relu_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.relu_param)
}

// .caffe.SigmoidParameter sigmoid_param = 17;
inline bool LayerParameter::has_sigmoid_param() const {
  return this != internal_default_instance() && sigmoid_param_ != NULL;
}
inline void LayerParameter::clear_sigmoid_param() {
  if (GetArenaNoVirtual() == NULL && sigmoid_param_ != NULL) {
    delete sigmoid_param_;
  }
  sigmoid_param_ = NULL;
}
inline const ::caffe::SigmoidParameter& LayerParameter::sigmoid_param() const {
  const ::caffe::SigmoidParameter* p = sigmoid_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.sigmoid_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::SigmoidParameter*>(
      &::caffe::_SigmoidParameter_default_instance_);
}
inline ::caffe::SigmoidParameter* LayerParameter::release_sigmoid_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.sigmoid_param)
  
  ::caffe::SigmoidParameter* temp = sigmoid_param_;
  sigmoid_param_ = NULL;
  return temp;
}
inline ::caffe::SigmoidParameter* LayerParameter::mutable_sigmoid_param() {
  
  if (sigmoid_param_ == NULL) {
    sigmoid_param_ = new ::caffe::SigmoidParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.sigmoid_param)
  return sigmoid_param_;
}
inline void LayerParameter::set_allocated_sigmoid_param(::caffe::SigmoidParameter* sigmoid_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sigmoid_param_;
  }
  if (sigmoid_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sigmoid_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sigmoid_param, submessage_arena);
    }
    
  } else {
    
  }
  sigmoid_param_ = sigmoid_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.sigmoid_param)
}

// .caffe.FullyConnectedParameter fully_connected_param = 18;
inline bool LayerParameter::has_fully_connected_param() const {
  return this != internal_default_instance() && fully_connected_param_ != NULL;
}
inline void LayerParameter::clear_fully_connected_param() {
  if (GetArenaNoVirtual() == NULL && fully_connected_param_ != NULL) {
    delete fully_connected_param_;
  }
  fully_connected_param_ = NULL;
}
inline const ::caffe::FullyConnectedParameter& LayerParameter::fully_connected_param() const {
  const ::caffe::FullyConnectedParameter* p = fully_connected_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.fully_connected_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FullyConnectedParameter*>(
      &::caffe::_FullyConnectedParameter_default_instance_);
}
inline ::caffe::FullyConnectedParameter* LayerParameter::release_fully_connected_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.fully_connected_param)
  
  ::caffe::FullyConnectedParameter* temp = fully_connected_param_;
  fully_connected_param_ = NULL;
  return temp;
}
inline ::caffe::FullyConnectedParameter* LayerParameter::mutable_fully_connected_param() {
  
  if (fully_connected_param_ == NULL) {
    fully_connected_param_ = new ::caffe::FullyConnectedParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.fully_connected_param)
  return fully_connected_param_;
}
inline void LayerParameter::set_allocated_fully_connected_param(::caffe::FullyConnectedParameter* fully_connected_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fully_connected_param_;
  }
  if (fully_connected_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fully_connected_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fully_connected_param, submessage_arena);
    }
    
  } else {
    
  }
  fully_connected_param_ = fully_connected_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.fully_connected_param)
}

// -------------------------------------------------------------------

// ReLUParameter

// float negative_slope = 1;
inline void ReLUParameter::clear_negative_slope() {
  negative_slope_ = 0;
}
inline float ReLUParameter::negative_slope() const {
  // @@protoc_insertion_point(field_get:caffe.ReLUParameter.negative_slope)
  return negative_slope_;
}
inline void ReLUParameter::set_negative_slope(float value) {
  
  negative_slope_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReLUParameter.negative_slope)
}

// .caffe.ReLUParameter.Engine engine = 2;
inline void ReLUParameter::clear_engine() {
  engine_ = 0;
}
inline ::caffe::ReLUParameter_Engine ReLUParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.ReLUParameter.engine)
  return static_cast< ::caffe::ReLUParameter_Engine >(engine_);
}
inline void ReLUParameter::set_engine(::caffe::ReLUParameter_Engine value) {
  
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReLUParameter.engine)
}

// -------------------------------------------------------------------

// SigmoidParameter

// .caffe.SigmoidParameter.Engine engine = 1;
inline void SigmoidParameter::clear_engine() {
  engine_ = 0;
}
inline ::caffe::SigmoidParameter_Engine SigmoidParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.SigmoidParameter.engine)
  return static_cast< ::caffe::SigmoidParameter_Engine >(engine_);
}
inline void SigmoidParameter::set_engine(::caffe::SigmoidParameter_Engine value) {
  
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.SigmoidParameter.engine)
}

// -------------------------------------------------------------------

// FullyConnectedParameter

// uint32 num_output = 1;
inline void FullyConnectedParameter::clear_num_output() {
  num_output_ = 0u;
}
inline ::google::protobuf::uint32 FullyConnectedParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.FullyConnectedParameter.num_output)
  return num_output_;
}
inline void FullyConnectedParameter::set_num_output(::google::protobuf::uint32 value) {
  
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.FullyConnectedParameter.num_output)
}

// bool bias_term = 2;
inline void FullyConnectedParameter::clear_bias_term() {
  bias_term_ = false;
}
inline bool FullyConnectedParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.FullyConnectedParameter.bias_term)
  return bias_term_;
}
inline void FullyConnectedParameter::set_bias_term(bool value) {
  
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.FullyConnectedParameter.bias_term)
}

// .caffe.FillerParameter weight_filler = 3;
inline bool FullyConnectedParameter::has_weight_filler() const {
  return this != internal_default_instance() && weight_filler_ != NULL;
}
inline void FullyConnectedParameter::clear_weight_filler() {
  if (GetArenaNoVirtual() == NULL && weight_filler_ != NULL) {
    delete weight_filler_;
  }
  weight_filler_ = NULL;
}
inline const ::caffe::FillerParameter& FullyConnectedParameter::weight_filler() const {
  const ::caffe::FillerParameter* p = weight_filler_;
  // @@protoc_insertion_point(field_get:caffe.FullyConnectedParameter.weight_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline ::caffe::FillerParameter* FullyConnectedParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.FullyConnectedParameter.weight_filler)
  
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline ::caffe::FillerParameter* FullyConnectedParameter::mutable_weight_filler() {
  
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.FullyConnectedParameter.weight_filler)
  return weight_filler_;
}
inline void FullyConnectedParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete weight_filler_;
  }
  if (weight_filler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      weight_filler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, weight_filler, submessage_arena);
    }
    
  } else {
    
  }
  weight_filler_ = weight_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.FullyConnectedParameter.weight_filler)
}

// .caffe.FillerParameter bias_filler = 4;
inline bool FullyConnectedParameter::has_bias_filler() const {
  return this != internal_default_instance() && bias_filler_ != NULL;
}
inline void FullyConnectedParameter::clear_bias_filler() {
  if (GetArenaNoVirtual() == NULL && bias_filler_ != NULL) {
    delete bias_filler_;
  }
  bias_filler_ = NULL;
}
inline const ::caffe::FillerParameter& FullyConnectedParameter::bias_filler() const {
  const ::caffe::FillerParameter* p = bias_filler_;
  // @@protoc_insertion_point(field_get:caffe.FullyConnectedParameter.bias_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline ::caffe::FillerParameter* FullyConnectedParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.FullyConnectedParameter.bias_filler)
  
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline ::caffe::FillerParameter* FullyConnectedParameter::mutable_bias_filler() {
  
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.FullyConnectedParameter.bias_filler)
  return bias_filler_;
}
inline void FullyConnectedParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bias_filler_;
  }
  if (bias_filler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bias_filler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bias_filler, submessage_arena);
    }
    
  } else {
    
  }
  bias_filler_ = bias_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.FullyConnectedParameter.bias_filler)
}

// int32 axis = 5;
inline void FullyConnectedParameter::clear_axis() {
  axis_ = 0;
}
inline ::google::protobuf::int32 FullyConnectedParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.FullyConnectedParameter.axis)
  return axis_;
}
inline void FullyConnectedParameter::set_axis(::google::protobuf::int32 value) {
  
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.FullyConnectedParameter.axis)
}

// bool transpose = 6;
inline void FullyConnectedParameter::clear_transpose() {
  transpose_ = false;
}
inline bool FullyConnectedParameter::transpose() const {
  // @@protoc_insertion_point(field_get:caffe.FullyConnectedParameter.transpose)
  return transpose_;
}
inline void FullyConnectedParameter::set_transpose(bool value) {
  
  transpose_ = value;
  // @@protoc_insertion_point(field_set:caffe.FullyConnectedParameter.transpose)
}

// -------------------------------------------------------------------

// PoolingParameter

// .caffe.PoolingParameter.PoolMethod pool = 1;
inline void PoolingParameter::clear_pool() {
  pool_ = 0;
}
inline ::caffe::PoolingParameter_PoolMethod PoolingParameter::pool() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pool)
  return static_cast< ::caffe::PoolingParameter_PoolMethod >(pool_);
}
inline void PoolingParameter::set_pool(::caffe::PoolingParameter_PoolMethod value) {
  
  pool_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pool)
}

// uint32 kernel_size = 2;
inline void PoolingParameter::clear_kernel_size() {
  kernel_size_ = 0u;
}
inline ::google::protobuf::uint32 PoolingParameter::kernel_size() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.kernel_size)
  return kernel_size_;
}
inline void PoolingParameter::set_kernel_size(::google::protobuf::uint32 value) {
  
  kernel_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.kernel_size)
}

// uint32 kernel_h = 5;
inline void PoolingParameter::clear_kernel_h() {
  kernel_h_ = 0u;
}
inline ::google::protobuf::uint32 PoolingParameter::kernel_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.kernel_h)
  return kernel_h_;
}
inline void PoolingParameter::set_kernel_h(::google::protobuf::uint32 value) {
  
  kernel_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.kernel_h)
}

// uint32 kernel_w = 6;
inline void PoolingParameter::clear_kernel_w() {
  kernel_w_ = 0u;
}
inline ::google::protobuf::uint32 PoolingParameter::kernel_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.kernel_w)
  return kernel_w_;
}
inline void PoolingParameter::set_kernel_w(::google::protobuf::uint32 value) {
  
  kernel_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.kernel_w)
}

// uint32 stride = 3;
inline void PoolingParameter::clear_stride() {
  stride_ = 0u;
}
inline ::google::protobuf::uint32 PoolingParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.stride)
  return stride_;
}
inline void PoolingParameter::set_stride(::google::protobuf::uint32 value) {
  
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.stride)
}

// uint32 stride_h = 7;
inline void PoolingParameter::clear_stride_h() {
  stride_h_ = 0u;
}
inline ::google::protobuf::uint32 PoolingParameter::stride_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.stride_h)
  return stride_h_;
}
inline void PoolingParameter::set_stride_h(::google::protobuf::uint32 value) {
  
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.stride_h)
}

// uint32 stride_w = 8;
inline void PoolingParameter::clear_stride_w() {
  stride_w_ = 0u;
}
inline ::google::protobuf::uint32 PoolingParameter::stride_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.stride_w)
  return stride_w_;
}
inline void PoolingParameter::set_stride_w(::google::protobuf::uint32 value) {
  
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.stride_w)
}

// uint32 pad = 4;
inline void PoolingParameter::clear_pad() {
  pad_ = 0u;
}
inline ::google::protobuf::uint32 PoolingParameter::pad() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pad)
  return pad_;
}
inline void PoolingParameter::set_pad(::google::protobuf::uint32 value) {
  
  pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pad)
}

// uint32 pad_h = 9;
inline void PoolingParameter::clear_pad_h() {
  pad_h_ = 0u;
}
inline ::google::protobuf::uint32 PoolingParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pad_h)
  return pad_h_;
}
inline void PoolingParameter::set_pad_h(::google::protobuf::uint32 value) {
  
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pad_h)
}

// uint32 pad_w = 10;
inline void PoolingParameter::clear_pad_w() {
  pad_w_ = 0u;
}
inline ::google::protobuf::uint32 PoolingParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pad_w)
  return pad_w_;
}
inline void PoolingParameter::set_pad_w(::google::protobuf::uint32 value) {
  
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pad_w)
}

// .caffe.PoolingParameter.Engine engine = 11;
inline void PoolingParameter::clear_engine() {
  engine_ = 0;
}
inline ::caffe::PoolingParameter_Engine PoolingParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.engine)
  return static_cast< ::caffe::PoolingParameter_Engine >(engine_);
}
inline void PoolingParameter::set_engine(::caffe::PoolingParameter_Engine value) {
  
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.engine)
}

// bool global_pooling = 12;
inline void PoolingParameter::clear_global_pooling() {
  global_pooling_ = false;
}
inline bool PoolingParameter::global_pooling() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.global_pooling)
  return global_pooling_;
}
inline void PoolingParameter::set_global_pooling(bool value) {
  
  global_pooling_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.global_pooling)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::caffe::FillerParameter_VarianceNorm> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::FillerParameter_VarianceNorm>() {
  return ::caffe::FillerParameter_VarianceNorm_descriptor();
}
template <> struct is_proto_enum< ::caffe::ReLUParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ReLUParameter_Engine>() {
  return ::caffe::ReLUParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::SigmoidParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SigmoidParameter_Engine>() {
  return ::caffe::SigmoidParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::PoolingParameter_PoolMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::PoolingParameter_PoolMethod>() {
  return ::caffe::PoolingParameter_PoolMethod_descriptor();
}
template <> struct is_proto_enum< ::caffe::PoolingParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::PoolingParameter_Engine>() {
  return ::caffe::PoolingParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::Phase> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::Phase>() {
  return ::caffe::Phase_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_caffe_2eproto__INCLUDED
